diff --git i/projects/cli/src/main.cpp w/projects/cli/src/main.cpp
index b21332cce..c98696387 100644
--- i/projects/cli/src/main.cpp
+++ w/projects/cli/src/main.cpp
@@ -258,6 +258,7 @@ EngineMatch* parseMatch(const QStringList& args, QObject* parent)
 	parser.addOption("-openings", QVariant::StringList);
 	parser.addOption("-bookmode", QVariant::String);
 	parser.addOption("-pgnout", QVariant::StringList, 1, 3);
+	parser.addOption("-livepgnout", QVariant::StringList, 1, 2);
 	parser.addOption("-epdout", QVariant::String, 1, 1);
 	parser.addOption("-repeat", QVariant::Int, 0, 1);
 	parser.addOption("-noswap", QVariant::Bool, 0, 0);
@@ -510,6 +511,22 @@ EngineMatch* parseMatch(const QStringList& args, QObject* parent)
 			if (ok)
 				tournament->setPgnOutput(list.at(0), mode);
 		}
+		// PGN file where the games should be saved after every move
+		else if (name == "-livepgnout")
+		{
+			PgnGame::PgnMode mode = PgnGame::Verbose;
+			QStringList list = value.toStringList();
+			if (list.size() == 2)
+			{
+				if (list.at(1) == "min")
+					mode = PgnGame::Minimal;
+				else
+					ok = false;
+			}
+			if (ok)
+				tournament->setLivePgnOutput(list.at(0), mode);
+
+		}
 		// FEN/EPD output file to save positions
 		else if (name == "-epdout")
 		{
diff --git i/projects/lib/src/chessgame.cpp w/projects/lib/src/chessgame.cpp
index 3f0994073..469b0d991 100644
--- i/projects/lib/src/chessgame.cpp
+++ w/projects/lib/src/chessgame.cpp
@@ -230,6 +230,8 @@ void ChessGame::addPgnMove(const Chess::Move& move, const QString& comment)
 	md.comment = comment;
 
 	m_pgn->addMove(md);
+
+	emit pgnMove();
 }
 
 void ChessGame::emitLastMove()
diff --git i/projects/lib/src/chessgame.h w/projects/lib/src/chessgame.h
index 753166b4e..5967d95d1 100644
--- i/projects/lib/src/chessgame.h
+++ w/projects/lib/src/chessgame.h
@@ -105,6 +105,7 @@ class LIB_EXPORT ChessGame : public QObject
 			      Chess::Result result = Chess::Result());
 		void startFailed(ChessGame* game = nullptr);
 		void playersReady();
+		void pgnMove();
 
 	private slots:
 		void startGame();
diff --git i/projects/lib/src/tournament.cpp w/projects/lib/src/tournament.cpp
index 21c8c76cb..32fdbab6a 100644
--- i/projects/lib/src/tournament.cpp
+++ w/projects/lib/src/tournament.cpp
@@ -58,7 +58,8 @@ Tournament::Tournament(GameManager* gameManager, QObject *parent)
 	  m_repetitionCounter(0),
 	  m_swapSides(true),
 	  m_pgnOutMode(PgnGame::Verbose),
-	  m_pair(nullptr)
+	  m_pair(nullptr),
+	  m_livePgnOutMode(PgnGame::Verbose)
 {
 	Q_ASSERT(gameManager != nullptr);
 }
@@ -258,6 +259,12 @@ void Tournament::setPgnWriteUnfinishedGames(bool enabled)
 	m_pgnWriteUnfinishedGames = enabled;
 }
 
+void Tournament::setLivePgnOutput(const QString& fileName, PgnGame::PgnMode mode)
+{
+	m_livePgnout = fileName;
+	m_livePgnOutMode = mode;
+}
+
 void Tournament::setPgnCleanupEnabled(bool enabled)
 {
 	m_pgnCleanup = enabled;
@@ -352,6 +359,8 @@ void Tournament::startGame(TournamentPair* pair)
 		this, SLOT(onGameStarted(ChessGame*)));
 	connect(game, SIGNAL(finished(ChessGame*)),
 		this, SLOT(onGameFinished(ChessGame*)));
+	connect(game, SIGNAL(pgnMove()),
+		this, SLOT(onPgnMove()));
 
 	game->setTimeControl(white.timeControl(), Chess::Side::White);
 	game->setTimeControl(black.timeControl(), Chess::Side::Black);
@@ -495,6 +504,12 @@ bool Tournament::writePgn(PgnGame* pgn, int gameNumber)
 
 	bool ok = true;
 	m_pgnGames[gameNumber] = *pgn;
+
+	if (!m_livePgnout.isEmpty()) {
+		QFile::resize(m_livePgnout, 0);
+		pgn->write(m_livePgnout, m_livePgnOutMode); // write the final pgn
+	}
+
 	while (m_pgnGames.contains(m_savedGameCount + 1))
 	{
 		PgnGame tmp = m_pgnGames.take(++m_savedGameCount);
@@ -574,6 +589,21 @@ void Tournament::onGameStarted(ChessGame* game)
 	emit gameStarted(game, data->number, iWhite, iBlack);
 }
 
+void Tournament::onPgnMove()
+{
+	if (m_livePgnout.isEmpty()) return;
+
+	ChessGame* sender = qobject_cast<ChessGame*>(QObject::sender());
+	Q_ASSERT(sender != 0);
+
+	// printf(">>>>>>>>>>>>>>>>>>>>SIGNALED>>>>>>>>>>>>>>>>>>\n");
+
+	PgnGame* pgn(sender->pgn());
+
+	QFile::resize(m_livePgnout, 0);
+	pgn->write(m_livePgnout, m_livePgnOutMode);
+}
+
 void Tournament::onGameFinished(ChessGame* game)
 {
 	Q_ASSERT(game != nullptr);
diff --git i/projects/lib/src/tournament.h w/projects/lib/src/tournament.h
index 4ab82a814..ed5318e36 100644
--- i/projects/lib/src/tournament.h
+++ w/projects/lib/src/tournament.h
@@ -178,6 +178,8 @@ class LIB_EXPORT Tournament : public QObject
 		 */
 		void setPgnOutput(const QString& fileName,
 				  PgnGame::PgnMode mode = PgnGame::Verbose);
+		void setLivePgnOutput(const QString& fileName,
+				  PgnGame::PgnMode mode = PgnGame::Verbose);
 
 		/*!
 		 * Sets the PgnGame mode to write unfinished games to \a enabled.
@@ -402,6 +404,7 @@ class LIB_EXPORT Tournament : public QObject
 		void onGameFinished(ChessGame* game);
 		void onGameDestroyed(ChessGame* game);
 		void onGameStartFailed(ChessGame* game);
+		void onPgnMove();
 
 	private:
 		struct GameData
@@ -460,6 +463,8 @@ class LIB_EXPORT Tournament : public QObject
 		QMap<int, PgnGame> m_pgnGames;
 		QMap<ChessGame*, GameData*> m_gameData;
 		QVector<Chess::Move> m_openingMoves;
+		QString m_livePgnout;
+		PgnGame::PgnMode m_livePgnOutMode;
 };
 
 #endif // TOURNAMENT_H
